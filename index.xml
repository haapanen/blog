<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JUSSI HAAPANEN</title>
    <link>https://jussihaapanen.com/</link>
    <description>Recent content on JUSSI HAAPANEN</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 07 Jul 2020 12:35:16 +0300</lastBuildDate>
    
	<atom:link href="https://jussihaapanen.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>.NET Core plugin dependency injection</title>
      <link>https://jussihaapanen.com/posts/dotnet-core-plugin-dependency-injection/</link>
      <pubDate>Tue, 07 Jul 2020 12:35:16 +0300</pubDate>
      
      <guid>https://jussihaapanen.com/posts/dotnet-core-plugin-dependency-injection/</guid>
      <description>Introduction You might run into a case where you would like to extend the application without updating the application core. Plugins could be one solution for the issue. It&amp;rsquo;s fairly simple to implement a plugin architecture in .NET Core. Microsoft has documented the process of adding plugin support for your application in https://docs.microsoft.com/en-us/dotnet/core/tutorials/creating-app-with-plugin-support.
It&amp;rsquo;s a good quick start to plugin architecture and gets you quite far. However, it does not explain how to add support for dependency injection from host process to the plugin process.</description>
    </item>
    
    <item>
      <title>Piping data to an application in .NET Core</title>
      <link>https://jussihaapanen.com/posts/piping-data-in-dotnet-core/</link>
      <pubDate>Sun, 16 Jun 2019 18:12:04 +0300</pubDate>
      
      <guid>https://jussihaapanen.com/posts/piping-data-in-dotnet-core/</guid>
      <description>Earlier today I had a need for a PlantUML API that could generate PlantUML diagrams without having to install the necessary dependencies on my PC. To achieve this I decided to write a small API using ASP.NET Core.
I was thinking of just calling the PlantUML binary with the input data from a HTTP POST body. There could be some security implications but I was the only user of the system so it didn&amp;rsquo;t really matter.</description>
    </item>
    
    <item>
      <title>Dynamic queries using NHibernate with the help of C# expression trees</title>
      <link>https://jussihaapanen.com/posts/dynamic-queries-using-nhibernate/</link>
      <pubDate>Sun, 05 Feb 2017 00:00:00 +0300</pubDate>
      
      <guid>https://jussihaapanen.com/posts/dynamic-queries-using-nhibernate/</guid>
      <description>I had to recently figure out a way to query database objects based on user input without knowing beforehand which classes user wants to query. Basically user would input a type and the system would find itâ€™s child types from a database table. The children would then be fetched based on a set of rules (we do not want all items on the table, just the ones linked to the parent).</description>
    </item>
    
  </channel>
</rss>